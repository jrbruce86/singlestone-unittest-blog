@Test
public void customerInitialPurchaseSuccessful() {
    /**
     * Setup
     */
    // stub the customer lookup to simulate non existing customer
    Mockito.when(customerRepository.findById(DefaultStoreValues.defaultCustomerID1)).thenReturn(Optional.empty());

    // stub the dto mapper operation return the expect result
    final PurchaseRecord expectedResult = Mockito.mock(PurchaseRecord.class);
    Mockito.when(dtoMapper.toPurchaseRecord(DefaultStoreValues.defaultInboundCustomerPurchase)).thenReturn(expectedResult);

    // stub the save operation to save successfully returning saved result
    Mockito.when(purchaseRecordRepository.save(expectedResult)).thenReturn(expectedResult);

    /**
     * Exercise
     */
    final PurchaseRecord actualResult = systemUnderTest.purchase(DefaultStoreValues.defaultInboundCustomerPurchase);

/**
* Verify
 */
final ArgumentCaptor<Customer> expectedSavedCustomer = ArgumentCaptor.forClass(Customer.class);
Mockito.verify(customerRepository, Mockito.times(1)).save(expectedSavedCustomer.capture());
Assertions.assertEquals(expectedSavedCustomer.getValue().getCustomerID(), DefaultStoreValues.defaultCustomerID1);
Mockito.verify(customerRepository, Mockito.times(1)).findById(DefaultStoreValues.defaultCustomerID1);
Mockito.verify(dtoMapper, Mockito.times(1)).toPurchaseRecord(DefaultStoreValues.defaultInboundCustomerPurchase);
Mockito.verify(purchaseRecordRepository, Mockito.times(1)).save(expectedResult);
Assertions.assertTrue(expectedResult == actualResult, "The returned result does not match the expected result");
}